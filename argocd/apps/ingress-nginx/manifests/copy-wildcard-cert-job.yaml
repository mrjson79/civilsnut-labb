apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-copier
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-copier
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-copier
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-copier
subjects:
- kind: ServiceAccount
  name: cert-copier
  namespace: ingress-nginx
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: copy-wildcard-cert
  namespace: ingress-nginx
  labels:
    app: cert-copier
spec:
  schedule: "*/15 * * * *"  # Run every 15 minutes
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: cert-copier
        spec:
          serviceAccountName: cert-copier
          restartPolicy: OnFailure
          containers:
          - name: cert-copier
            image: bitnami/kubectl:latest
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              SOURCE_NAMESPACE="cert-manager"
              TARGET_NAMESPACE="ingress-nginx"
              SECRET_NAME="civilsnut-se-wildcard-tls"
              
              echo "Starting certificate sync job..."
              echo "Source: ${SOURCE_NAMESPACE}/${SECRET_NAME}"
              echo "Target: ${TARGET_NAMESPACE}/${SECRET_NAME}"
              
              # Check if source secret exists
              if ! kubectl get secret "${SECRET_NAME}" -n "${SOURCE_NAMESPACE}" >/dev/null 2>&1; then
                echo "Source certificate secret not found in ${SOURCE_NAMESPACE} namespace. Skipping..."
                exit 0
              fi
              
              echo "Source certificate found. Checking target namespace..."
              
              # Get source secret data
              SOURCE_DATA=$(kubectl get secret "${SECRET_NAME}" -n "${SOURCE_NAMESPACE}" -o json)
              SOURCE_HASH=$(echo "${SOURCE_DATA}" | jq -r '.data."tls.crt"' | sha256sum | cut -d' ' -f1)
              
              # Check if target secret exists and compare
              if kubectl get secret "${SECRET_NAME}" -n "${TARGET_NAMESPACE}" >/dev/null 2>&1; then
                TARGET_DATA=$(kubectl get secret "${SECRET_NAME}" -n "${TARGET_NAMESPACE}" -o json)
                TARGET_HASH=$(echo "${TARGET_DATA}" | jq -r '.data."tls.crt"' | sha256sum | cut -d' ' -f1)
                
                if [ "${SOURCE_HASH}" = "${TARGET_HASH}" ]; then
                  echo "Certificate is already up to date in target namespace. No action needed."
                  exit 0
                fi
                
                echo "Certificate differs. Updating target secret..."
              else
                echo "Target secret doesn't exist. Creating new secret..."
              fi
              
              # Copy/update the secret
              kubectl get secret "${SECRET_NAME}" -n "${SOURCE_NAMESPACE}" -o yaml | \
                sed "s/namespace: ${SOURCE_NAMESPACE}/namespace: ${TARGET_NAMESPACE}/" | \
                sed '/resourceVersion:/d' | \
                sed '/uid:/d' | \
                sed '/creationTimestamp:/d' | \
                sed '/annotations:/,+2d' | \
                kubectl apply -f -
              
              echo "Certificate successfully synced to ${TARGET_NAMESPACE} namespace!"
              
              # Verify the operation
              if kubectl get secret "${SECRET_NAME}" -n "${TARGET_NAMESPACE}" >/dev/null 2>&1; then
                echo "Verification successful: Secret exists in target namespace"
                # Check if ingress-nginx controller is running and trigger reload
                if kubectl get deployment ingress-nginx-controller -n "${TARGET_NAMESPACE}" >/dev/null 2>&1; then
                  echo "Triggering ingress-nginx controller reload..."
                  kubectl patch deployment ingress-nginx-controller -n "${TARGET_NAMESPACE}" \
                    -p '{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt":"'$(date -Iseconds)'"}}}}}'
                fi
              else
                echo "ERROR: Failed to create/update secret in target namespace"
                exit 1
              fi
              
              echo "Certificate sync job completed successfully!"
            resources:
              requests:
                memory: 64Mi
                cpu: 50m
              limits:
                memory: 128Mi
                cpu: 100m
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: false
          nodeSelector:
            virt: "yes"