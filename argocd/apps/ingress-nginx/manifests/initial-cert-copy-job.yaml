apiVersion: batch/v1
kind: Job
metadata:
  name: initial-cert-copy
  namespace: ingress-nginx
  labels:
    app: initial-cert-copier
spec:
  ttlSecondsAfterFinished: 300  # Clean up job after 5 minutes
  template:
    metadata:
      labels:
        app: initial-cert-copier
    spec:
      serviceAccountName: cert-copier
      restartPolicy: Never
      containers:
      - name: initial-cert-copier
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          SOURCE_NAMESPACE="cert-manager"
          TARGET_NAMESPACE="ingress-nginx"
          SECRET_NAME="civilsnut-se-wildcard-tls"
          MAX_WAIT_TIME=300  # 5 minutes
          WAIT_INTERVAL=10   # 10 seconds
          
          echo "Starting initial certificate copy job..."
          echo "Source: ${SOURCE_NAMESPACE}/${SECRET_NAME}"
          echo "Target: ${TARGET_NAMESPACE}/${SECRET_NAME}"
          
          # Wait for the source secret to exist
          echo "Waiting for source certificate secret to be ready..."
          waited=0
          while [ $waited -lt $MAX_WAIT_TIME ]; do
            if kubectl get secret "${SECRET_NAME}" -n "${SOURCE_NAMESPACE}" >/dev/null 2>&1; then
              echo "Source certificate found!"
              break
            fi
            echo "Waiting for ${SECRET_NAME} secret in ${SOURCE_NAMESPACE} namespace... (${waited}s/${MAX_WAIT_TIME}s)"
            sleep $WAIT_INTERVAL
            waited=$((waited + WAIT_INTERVAL))
          done
          
          if [ $waited -ge $MAX_WAIT_TIME ]; then
            echo "ERROR: Timeout waiting for source certificate secret"
            exit 1
          fi
          
          # Verify certificate is valid
          echo "Verifying certificate validity..."
          CERT_DATA=$(kubectl get secret "${SECRET_NAME}" -n "${SOURCE_NAMESPACE}" -o jsonpath='{.data.tls\.crt}')
          if [ -z "${CERT_DATA}" ]; then
            echo "ERROR: Certificate data is empty"
            exit 1
          fi
          
          # Decode and check certificate
          echo "${CERT_DATA}" | base64 -d | openssl x509 -noout -text >/dev/null
          if [ $? -ne 0 ]; then
            echo "ERROR: Invalid certificate data"
            exit 1
          fi
          
          echo "Certificate is valid. Copying to target namespace..."
          
          # Copy the secret using a more robust approach
          kubectl get secret "${SECRET_NAME}" -n "${SOURCE_NAMESPACE}" -o json | \
            jq --arg ns "${TARGET_NAMESPACE}" '
              .metadata.namespace = $ns |
              del(.metadata.resourceVersion) |
              del(.metadata.uid) |
              del(.metadata.creationTimestamp) |
              del(.metadata.annotations."argocd.argoproj.io/tracking-id") |
              del(.metadata.selfLink)
            ' | \
            kubectl apply -f -
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to copy certificate secret"
            exit 1
          fi
          
          echo "Certificate successfully copied to ${TARGET_NAMESPACE} namespace!"
          
          # Verify the operation
          if kubectl get secret "${SECRET_NAME}" -n "${TARGET_NAMESPACE}" >/dev/null 2>&1; then
            echo "Verification successful: Secret exists in target namespace"
            
            # Show certificate details
            echo "Certificate details:"
            kubectl get secret "${SECRET_NAME}" -n "${TARGET_NAMESPACE}" -o jsonpath='{.data.tls\.crt}' | \
              base64 -d | openssl x509 -noout -subject -dates -ext subjectAltName
            
            # Trigger ingress-nginx controller reload if it exists
            if kubectl get deployment ingress-nginx-controller -n "${TARGET_NAMESPACE}" >/dev/null 2>&1; then
              echo "Triggering ingress-nginx controller reload..."
              kubectl patch deployment ingress-nginx-controller -n "${TARGET_NAMESPACE}" \
                -p '{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt":"'$(date -Iseconds)'"}}}}}'
              echo "Ingress-nginx controller reload triggered"
            else
              echo "Ingress-nginx controller not found, skipping reload"
            fi
          else
            echo "ERROR: Failed to verify certificate in target namespace"
            exit 1
          fi
          
          echo "Initial certificate copy job completed successfully!"
        resources:
          requests:
            memory: 64Mi
            cpu: 50m
          limits:
            memory: 128Mi
            cpu: 100m
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
      nodeSelector:
        virt: "yes"
  backoffLimit: 2