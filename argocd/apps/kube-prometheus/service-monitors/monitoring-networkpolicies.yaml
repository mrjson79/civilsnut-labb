apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-scraping
  namespace: monitoring
  labels:
    app: kube-prometheus-stack
    release: kube-prometheus-stack
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  policyTypes:
    - Egress
  egress:
    # Allow Prometheus to scrape metrics from all namespaces
    - to: []
      ports:
        - protocol: TCP
          port: 9965 # Cilium agent metrics
        - protocol: TCP
          port: 9963 # Cilium operator metrics
        - protocol: TCP
          port: 9966 # Hubble Relay metrics
        - protocol: TCP
          port: 8080 # Gateway API controller metrics
        - protocol: TCP
          port: 8443 # Gateway API webhook metrics
        - protocol: TCP
          port: 9090 # Prometheus federation
        - protocol: TCP
          port: 10254 # Ingress controller metrics
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow access to Kubernetes API
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 6443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-grafana-access
  namespace: monitoring
  labels:
    app: kube-prometheus-stack-grafana
    release: kube-prometheus-stack
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: grafana
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow health checks from kubelet (any source since kubelet runs on host network)
    - from: []
      ports:
        - protocol: TCP
          port: 3000
    # Allow access from Prometheus for metrics scraping if needed
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 3000
  egress:
    # Allow Grafana to access Prometheus
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow access to external datasources if needed
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-alertmanager-communication
  namespace: monitoring
  labels:
    app: kube-prometheus-stack-alertmanager
    release: kube-prometheus-stack
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: alertmanager
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow Prometheus to send alerts
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9093
    # Allow AlertManager clustering
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: alertmanager
      ports:
        - protocol: TCP
          port: 9094
  egress:
    # Allow AlertManager to send notifications
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 587 # SMTP TLS
        - protocol: TCP
          port: 25 # SMTP
        - protocol: TCP
          port: 465 # SMTP SSL
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow AlertManager clustering
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: alertmanager
      ports:
        - protocol: TCP
          port: 9094
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-cilium-metrics-scraping
  namespace: kube-system
  labels:
    app: cilium-monitoring
spec:
  podSelector:
    matchLabels:
      k8s-app: cilium
  policyTypes:
    - Ingress
  ingress:
    # Allow Prometheus to scrape Cilium agent metrics
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9965
    # Allow health checks
    - from: []
      ports:
        - protocol: TCP
          port: 9876
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-cilium-operator-metrics-scraping
  namespace: kube-system
  labels:
    app: cilium-operator-monitoring
spec:
  podSelector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  policyTypes:
    - Ingress
  ingress:
    # Allow Prometheus to scrape Cilium operator metrics
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9963
    # Allow health checks
    - from: []
      ports:
        - protocol: TCP
          port: 9234
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-hubble-relay-metrics-scraping
  namespace: kube-system
  labels:
    app: hubble-relay-monitoring
spec:
  podSelector:
    matchLabels:
      k8s-app: hubble-relay
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow Prometheus to scrape Hubble Relay metrics
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9966
    # Allow external access for Hubble UI/CLI
    - from: []
      ports:
        - protocol: TCP
          port: 4245
  egress:
    # Allow Hubble Relay to connect to Cilium agents
    - to:
        - podSelector:
            matchLabels:
              k8s-app: cilium
      ports:
        - protocol: TCP
          port: 4244
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-kube-state-metrics-scraping
  namespace: monitoring
  labels:
    app: kube-state-metrics
    release: kube-prometheus-stack
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow Prometheus to scrape kube-state-metrics
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # Allow kube-state-metrics to access Kubernetes API
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 6443
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-node-exporter-scraping
  namespace: monitoring
  labels:
    app: prometheus-node-exporter
    release: kube-prometheus-stack
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: node-exporter
  policyTypes:
    - Ingress
  ingress:
    # Allow Prometheus to scrape node-exporter
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9100
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-operator-webhooks
  namespace: monitoring
  labels:
    app: kube-prometheus-stack-operator
    release: kube-prometheus-stack
spec:
  podSelector:
    matchLabels:
      app: kube-prometheus-stack-operator
  policyTypes:
    - Ingress
  ingress:
    # Allow Kubernetes API server to call admission webhooks
    - from: []
      ports:
        - protocol: TCP
          port: 10250
---
# Network policy to ensure monitoring namespace is labeled
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    pod-security.kubernetes.io/enforce: privileged
---
# Gateway API monitoring for gateway-system namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-gateway-api-metrics-scraping
  namespace: gateway-system
  labels:
    app: gateway-api-monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: gateway-api
  policyTypes:
    - Ingress
  ingress:
    # Allow Prometheus to scrape Gateway API controller metrics
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8443
