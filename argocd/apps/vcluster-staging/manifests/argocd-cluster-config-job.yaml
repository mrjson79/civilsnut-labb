---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vcluster-argocd-config
  namespace: staging
  labels:
    app.kubernetes.io/name: vcluster-staging
    app.kubernetes.io/component: argocd-config
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vcluster-argocd-config
  labels:
    app.kubernetes.io/name: vcluster-staging
    app.kubernetes.io/component: argocd-config
    app.kubernetes.io/managed-by: argocd
rules:
  # Access to create/update secrets in argocd namespace
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "list", "patch", "update", "delete"]
  # Access to read services, serviceaccounts, and pods
  - apiGroups: [""]
    resources: ["services", "serviceaccounts", "pods"]
    verbs: ["get", "list"]
  # Access to read namespaces
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vcluster-argocd-config
  labels:
    app.kubernetes.io/name: vcluster-staging
    app.kubernetes.io/component: argocd-config
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
  - kind: ServiceAccount
    name: vcluster-argocd-config
    namespace: staging
roleRef:
  kind: ClusterRole
  name: vcluster-argocd-config
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: vcluster-argocd-config-job
  namespace: staging
  labels:
    app.kubernetes.io/name: vcluster-staging
    app.kubernetes.io/component: argocd-config
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "5"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vcluster-staging
        app.kubernetes.io/component: argocd-config
    spec:
      serviceAccountName: vcluster-argocd-config
      restartPolicy: OnFailure
      containers:
        - name: config-vcluster
          image: bitnami/kubectl:latest
          command:
            - /bin/bash
            - -c
            - |
              set -e

              echo "Starting vCluster ArgoCD configuration..."

              # Wait for vCluster to be ready
              echo "Waiting for vCluster service to be ready..."
              kubectl wait --for=condition=ready pod -l app=vcluster -n staging --timeout=300s

              # Find vCluster admin service account
              echo "Finding vCluster admin service account..."
              VCLUSTER_SA=$(kubectl get sa -n staging -l app=vcluster -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

              if [ -z "$VCLUSTER_SA" ]; then
                echo "No vCluster service account found, trying default admin SA..."
                VCLUSTER_SA="vc-vcluster-staging"
              fi

              echo "Using service account: $VCLUSTER_SA"

              # Get the service account token secret
              SA_SECRET=$(kubectl get sa $VCLUSTER_SA -n staging -o jsonpath='{.secrets[0].name}' 2>/dev/null || echo "")

              if [ -z "$SA_SECRET" ]; then
                echo "No secret found in SA, creating token..."
                # Create a token for the service account
                SA_TOKEN=$(kubectl create token $VCLUSTER_SA -n staging --duration=8760h)
              else
                echo "Using existing secret: $SA_SECRET"
                SA_TOKEN=$(kubectl get secret $SA_SECRET -n staging -o jsonpath='{.data.token}' | base64 -d)
              fi

              # Get vCluster CA certificate
              echo "Extracting vCluster CA certificate..."
              VCLUSTER_CA_SECRET=$(kubectl get secret -n staging -l app=vcluster -o jsonpath='{.items[?(@.type=="kubernetes.io/tls")].metadata.name}' | head -n1)

              if [ -z "$VCLUSTER_CA_SECRET" ]; then
                echo "Trying alternative CA secret names..."
                VCLUSTER_CA_SECRET="vc-vcluster-staging-ca"
              fi

              echo "Using CA secret: $VCLUSTER_CA_SECRET"

              # Extract CA certificate
              CA_CERT=$(kubectl get secret $VCLUSTER_CA_SECRET -n staging -o jsonpath='{.data.ca\.crt}' 2>/dev/null || \
                       kubectl get secret $VCLUSTER_CA_SECRET -n staging -o jsonpath='{.data.tls\.crt}' 2>/dev/null || \
                       echo "")

              if [ -z "$CA_CERT" ]; then
                echo "Could not find CA certificate, using service CA..."
                CA_CERT=$(kubectl get secret -n staging -o jsonpath='{.items[?(@.data.ca\.crt)].data.ca\.crt}' | head -n1)
              fi

              # Build kubeconfig
              echo "Building kubeconfig..."
              cat > /tmp/kubeconfig <<EOF
              apiVersion: v1
              kind: Config
              clusters:
              - cluster:
                  certificate-authority-data: ${CA_CERT}
                  server: https://staging.civilsnut.se:443
                name: vcluster-staging
              contexts:
              - context:
                  cluster: vcluster-staging
                  user: vcluster-admin
                  namespace: default
                name: vcluster-staging
              current-context: vcluster-staging
              users:
              - name: vcluster-admin
                user:
                  token: ${SA_TOKEN}
              EOF

              # Test the kubeconfig
              echo "Testing kubeconfig..."
              export KUBECONFIG=/tmp/kubeconfig
              if ! kubectl get ns default --request-timeout=10s; then
                echo "WARNING: Could not connect to vCluster, but proceeding with secret creation..."
              else
                echo "Successfully connected to vCluster!"
              fi

              # Encode data for ArgoCD cluster secret
              CLUSTER_NAME_B64=$(echo -n "vcluster-staging" | base64 -w 0)
              SERVER_URL_B64=$(echo -n "https://staging.civilsnut.se:443" | base64 -w 0)
              KUBECONFIG_B64=$(cat /tmp/kubeconfig | base64 -w 0)

              # Create ArgoCD cluster secret
              echo "Creating ArgoCD cluster secret..."
              cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: Secret
              metadata:
                name: vcluster-staging-cluster
                namespace: argocd
                labels:
                  argocd.argoproj.io/secret-type: cluster
                  app.kubernetes.io/name: vcluster-staging
                  app.kubernetes.io/component: argocd-cluster-secret
                  app.kubernetes.io/managed-by: argocd
                  environment: staging
              type: Opaque
              data:
                name: ${CLUSTER_NAME_B64}
                server: ${SERVER_URL_B64}
                config: ${KUBECONFIG_B64}
              EOF

              echo "ArgoCD cluster secret created successfully!"

              # Verify the secret
              kubectl get secret vcluster-staging-cluster -n argocd -o yaml

              echo "vCluster ArgoCD configuration completed successfully"
