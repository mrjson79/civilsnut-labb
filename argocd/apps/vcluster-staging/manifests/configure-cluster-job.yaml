apiVersion: batch/v1
kind: Job
metadata:
  name: configure-vcluster-argocd
  namespace: staging
  labels:
    app.kubernetes.io/name: configure-vcluster-argocd
    app.kubernetes.io/component: configuration-job
    app.kubernetes.io/managed-by: argocd
    environment: staging
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: configure-vcluster-argocd
        app.kubernetes.io/component: configuration-job
    spec:
      restartPolicy: Never
      serviceAccountName: vcluster-argocd-configurator
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: configure-cluster
          image: loftsh/vcluster-cli:0.26.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: VCLUSTER_NAME
              value: "staging"
            - name: VCLUSTER_NAMESPACE
              value: "staging"
            - name: ARGOCD_NAMESPACE
              value: "argocd"
            - name: CLUSTER_NAME
              value: "staging"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting vcluster ArgoCD configuration..."

              # Wait for vcluster to be ready
              echo "Waiting for vcluster to be ready..."
              for i in $(seq 1 60); do
                if kubectl get vcluster $VCLUSTER_NAME -n $VCLUSTER_NAMESPACE -o jsonpath='{.status.phase}' 2>/dev/null | grep -q "Ready"; then
                  echo "vcluster is ready!"
                  break
                fi
                echo "Waiting for vcluster... (attempt $i/60)"
                sleep 10
              done

              # Get vcluster kubeconfig
              echo "Getting vcluster kubeconfig..."
              vcluster connect $VCLUSTER_NAME -n $VCLUSTER_NAMESPACE --print > /tmp/vcluster-kubeconfig.yaml

              # Extract connection details
              VCLUSTER_SERVER=$(grep server: /tmp/vcluster-kubeconfig.yaml | awk '{print $2}')
              VCLUSTER_CA_DATA=$(grep certificate-authority-data: /tmp/vcluster-kubeconfig.yaml | awk '{print $2}')
              VCLUSTER_CERT_DATA=$(grep client-certificate-data: /tmp/vcluster-kubeconfig.yaml | awk '{print $2}')
              VCLUSTER_KEY_DATA=$(grep client-key-data: /tmp/vcluster-kubeconfig.yaml | awk '{print $2}')

              echo "Extracted connection details:"
              echo "Server: $VCLUSTER_SERVER"
              echo "CA Data length: $(echo $VCLUSTER_CA_DATA | wc -c)"

              # Create ArgoCD cluster secret
              echo "Creating ArgoCD cluster secret..."
              cat > /tmp/cluster-secret.yaml << EOF
              apiVersion: v1
              kind: Secret
              metadata:
                name: staging-cluster
                namespace: $ARGOCD_NAMESPACE
                labels:
                  argocd.argoproj.io/secret-type: cluster
                  app.kubernetes.io/name: staging-cluster
                  app.kubernetes.io/component: cluster-secret
                  app.kubernetes.io/managed-by: vcluster-configurator
                  environment: staging
                  kargo.akuity.io/stage: staging
              type: Opaque
              stringData:
                name: staging
                server: $VCLUSTER_SERVER
                config: |
                  {
                    "tlsClientConfig": {
                      "insecure": false,
                      "caData": "$VCLUSTER_CA_DATA",
                      "certData": "$VCLUSTER_CERT_DATA",
                      "keyData": "$VCLUSTER_KEY_DATA"
                    }
                  }
              EOF

              # Apply the secret
              kubectl apply -f /tmp/cluster-secret.yaml

              # Verify the cluster is accessible
              echo "Verifying cluster connectivity..."
              if kubectl --kubeconfig=/tmp/vcluster-kubeconfig.yaml get nodes > /dev/null 2>&1; then
                echo "✅ Successfully configured ArgoCD cluster connection to vcluster!"
              else
                echo "❌ Failed to verify cluster connectivity"
                exit 1
              fi

              echo "Configuration complete!"
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vcluster-argocd-configurator
  namespace: staging
  labels:
    app.kubernetes.io/name: vcluster-argocd-configurator
    app.kubernetes.io/component: service-account
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "5"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vcluster-argocd-configurator
  labels:
    app.kubernetes.io/name: vcluster-argocd-configurator
    app.kubernetes.io/component: cluster-role
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "6"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch"]
  - apiGroups: ["storage.loft.sh"]
    resources: ["vclusters"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/portforward"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vcluster-argocd-configurator
  labels:
    app.kubernetes.io/name: vcluster-argocd-configurator
    app.kubernetes.io/component: cluster-role-binding
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "7"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vcluster-argocd-configurator
subjects:
  - kind: ServiceAccount
    name: vcluster-argocd-configurator
    namespace: staging
